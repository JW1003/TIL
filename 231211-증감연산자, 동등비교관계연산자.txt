[1] < 증가 & 감소 연산자 Increment & Decrement Operators >
많이 헷갈렸으므로 정리해두기.

    (1) a++ : 주어진 연산을 먼저 하고, 그 뒤에 a의 값을 +1 함.
    (2) ++a : a의 값을 먼저 +1 하고, 주어진 연산을 진행함.


    [ 예시 1 ]
    let a = 0;
    let b = a++;
    console.log(b); // 0
    console.log(a); // 1

    [ 예시 2 ]
    let c = 0;
    console.log(c++); // 0
    console.log(c);  //1
    //※ 우선 해야하는 연산(console.log(c) 찍기)를 먼저 한 뒤, c +1 을 실행함.




[2] < 동등 비교 관계 연산자 Equality operators >
    == 값이 같은가
    != 값이 다른가
    === 값과 타입이 둘다 같은가
    !== 값과 타입이 둘다 다른가


    console.log(2=='2'); //true (타입은 다르지만, 비교할때 '2'가 자동으로 2로 바뀌어서 비교함)
    console.log(2==='2'); //🌟false (값은 같지만 타입이 달라서 false)
    ※ 코딩할 땐 타입도 중요하므로, ===를 더 많이 쓰게 된다.

    [ 예시 1 ]
    const obj1 = {
        name: 'js'
    };

    const obj2 = {
        name: 'js'
    };

    console.log(obj1 == obj2); // false
        WHY? 내용물의 내용(key-value)은 같지만, 주소값은 달라.

    [ 예시 2 ]
    console.log(obj1.name == obj2.name); //true
    console.log(obj1.name === obj2.name); //true
        WHY? 내용물의 name값이 서로 같으므로 


    [ 예시 3 ]
    const obj3 = obj2;

    console.log(obj3 == obj2); //true (주소값을 복사해서 복제하기 때문)
    console.log(obj3 === obj2); //true
